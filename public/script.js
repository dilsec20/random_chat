const socket = io();let peerConnection;let localStream;function showSection(section){  document.querySelectorAll(".chat-section, .menu").forEach(s=>s.style.display="none");  section.style.display="flex";}// --- Random Chat ---document.getElementById("startRandomBtn").onclick = ()=>{  const mode = document.querySelector('input[name="mode"]:checked').value;  socket.emit("findStranger", mode);  showSection(document.getElementById("randomVideo"));  clearVideoAndChat();}// --- Friend Room ---document.getElementById("joinFriendBtn").onclick = ()=>{  const room = document.getElementById("friendRoomCode").value.trim();  if(!room) return alert("Enter a room code");  const mode = document.querySelector('input[name="friendMode"]:checked').value;  socket.emit("joinFriendRoom", {room, mode});  showSection(document.getElementById("randomVideo"));  document.getElementById("randomStatus").textContent = "Waiting for friend to join...";  clearVideoAndChat();}// Elementsconst remoteVideoRandom = document.getElementById("remoteVideoRandom");const localVideoRandom = document.getElementById("localVideoRandom");const randomStatus = document.getElementById("randomStatus");const msgInput = document.getElementById("msgInputRandomVideo");const sendBtn = document.getElementById("sendBtnRandomVideo");const nextBtn = document.getElementById("nextBtnRandomVideo");const backBtn = document.getElementById("backRandomVideoBtn");const messages = document.getElementById("randomMessagesVideo");// Send messagesendBtn.onclick = ()=>{   const msg = msgInput.value.trim();   if(msg){     socket.emit("message", msg);     appendMessage("You", msg);     msgInput.value="";   } };msgInput.addEventListener("keypress", e=>{ if(e.key==="Enter") sendBtn.click(); });// Next / BacknextBtn.onclick = ()=>{  clearVideoAndChat();  randomStatus.textContent = "Finding a partner...";  socket.emit("nextStranger");};backBtn.onclick = ()=>{  socket.emit("backRandom");  showSection(document.getElementById("mainMenu"));  clearVideoAndChat();};function appendMessage(sender,msg){  const div=document.createElement("div");  div.textContent=`${sender}: ${msg}`;  messages.appendChild(div);  messages.scrollTop = messages.scrollHeight;}// Socket eventssocket.on("message", msg=>appendMessage("Stranger", msg));socket.on("typing", isTyping=> document.getElementById("typingRandomVideo").textContent = isTyping ? "Stranger is typing..." : "");socket.on("waiting", msg => randomStatus.textContent = msg);// --- Video WebRTC ---async function startRandomVideo(){  try{    localStream = await navigator.mediaDevices.getUserMedia({video:true,audio:true});    localVideoRandom.srcObject = localStream;    peerConnection = new RTCPeerConnection();    localStream.getTracks().forEach(track=>peerConnection.addTrack(track, localStream));    peerConnection.ontrack = e=>{ remoteVideoRandom.srcObject = e.streams[0]; }    peerConnection.onicecandidate = e=>{ if(e.candidate) socket.emit("signal",{candidate:e.candidate}); }    const offer = await peerConnection.createOffer();    await peerConnection.setLocalDescription(offer);    socket.emit("signal",{offer});  }catch(err){ console.error("Camera error:", err); }}// Signalingsocket.on("partnerFound", async ({id, mode})=>{  randomStatus.textContent = "Connected âœ…";  if(mode==="video") await startRandomVideo();});socket.on("signal", async data=>{  if(!peerConnection) await startRandomVideo();  if(data.offer){    await peerConnection.setRemoteDescription(new RTCSessionDescription(data.offer));    const answer = await peerConnection.createAnswer();    await peerConnection.setLocalDescription(answer);    socket.emit("signal",{answer});  }  if(data.answer) await peerConnection.setRemoteDescription(new RTCSessionDescription(data.answer));  if(data.candidate) peerConnection.addIceCandidate(new RTCIceCandidate(data.candidate));});socket.on("partnerDisconnected", ()=> randomStatus.textContent="Partner disconnected. Waiting...");socket.on("userCount", count => document.getElementById("userCount").textContent = `Users online: ${count}`);function clearVideoAndChat(){  if(peerConnection){ peerConnection.close(); peerConnection=null; }  if(localStream) localStream.getTracks().forEach(track=>track.stop());  remoteVideoRandom.srcObject=null;  localVideoRandom.srcObject=null;  messages.innerHTML="";  msgInput.value="";  document.getElementById("typingRandomVideo").textContent="";}