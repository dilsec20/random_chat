const express = require("express");const http = require("http");const { Server } = require("socket.io");const app = express();const server = http.createServer(app);const io = new Server(server);app.use(express.static("public"));const users = {}; // socket.id -> {status, partner, mode, socket, room}// --- Helper functions ---function findPartner(socket) {  const user = users[socket.id];  if(!user || user.status!=="waiting") return;  const waitingUsers = Object.values(users).filter(u =>    u.status==="waiting" &&    u.socket.id!==socket.id &&    u.mode===user.mode  );  if(waitingUsers.length>0){    const partnerUser = waitingUsers[Math.floor(Math.random()*waitingUsers.length)];    users[socket.id].status = "inChat";    users[socket.id].partner = partnerUser.socket.id;    users[partnerUser.socket.id].status = "inChat";    users[partnerUser.socket.id].partner = socket.id;    partnerUser.socket.emit("partnerFound",{id: socket.id, mode: partnerUser.mode});    socket.emit("partnerFound",{id: partnerUser.socket.id, mode: user.mode});  } else {    socket.emit("waiting","Waiting for a stranger...");  }}function disconnectFromPartner(socket){  const user = users[socket.id];  if(!user || !user.partner) return;  const partnerUser = users[user.partner];  if(partnerUser){    partnerUser.partner = null;    if(partnerUser.status!=="inRoom") partnerUser.status = "waiting";    partnerUser.socket.emit("partnerDisconnected");  }  user.partner = null;  if(user.status!=="inRoom") user.status = "idle";}io.on("connection", socket=>{  users[socket.id] = {status:"idle", partner:null, mode:"text", socket};  io.emit("userCount", Object.keys(users).length);  // Random chat  socket.on("findStranger",(mode="text")=>{    users[socket.id].mode = mode;    users[socket.id].status = "waiting";    findPartner(socket);  });  // Friend room  socket.on("joinFriendRoom", ({room, mode})=>{    socket.join(room);    users[socket.id].mode = mode;    users[socket.id].status = "inRoom";    users[socket.id].room = room;    const clients = Array.from(io.sockets.adapter.rooms.get(room) || []);    if(clients.length===2){      const partnerId = clients.find(id => id!==socket.id);      users[socket.id].partner = partnerId;      users[partnerId].partner = socket.id;      io.to(partnerId).emit("partnerFound",{id: socket.id, mode});      socket.emit("partnerFound",{id: partnerId, mode});    } else {      socket.emit("waiting","Waiting for friend to join...");    }  });  socket.on("message", msg=>{    const user = users[socket.id];    if(user?.partner) io.to(user.partner).emit("message", msg);  });  socket.on("typing", isTyping=>{    const user = users[socket.id];    if(user?.partner) io.to(user.partner).emit("typing", isTyping);  });  socket.on("nextStranger", ()=>{    const user = users[socket.id];    if(user?.status==="inChat") disconnectFromPartner(socket);    if(user){      user.status = "waiting";      findPartner(socket);    }  });  socket.on("backRandom", ()=>{    disconnectFromPartner(socket);    users[socket.id].status="idle";  });  socket.on("signal", data=>{    const user = users[socket.id];    if(user?.partner) io.to(user.partner).emit("signal", data);  });  socket.on("disconnect", ()=>{    disconnectFromPartner(socket);    delete users[socket.id];    io.emit("userCount", Object.keys(users).length);  });});const PORT = process.env.PORT || 3000;server.listen(PORT, "0.0.0.0", ()=>console.log(`Server running on port ${PORT}`));